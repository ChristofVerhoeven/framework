<?php
	/**
	 * QDateRangePickerGen File
	 * 
	 * The abstract QDateRangePickerGen class defined here is
	 * code-generated and contains options, events and methods scraped from the
	 * JQuery UI documentation Web site. It is not generated by the typical
	 * codegen process, but rather is generated periodically by the core QCubed
	 * team and checked in. However, the code to generate this file is
	 * in the assets/_core/php/_devetools/jquery_ui_gen/jq_control_gen.php file
	 * and you can regenerate the files if you need to.
	 *
	 * The comments in this file are taken from the JQuery UI site, so they do
	 * not always make sense with regard to QCubed. They are simply provided
	 * as reference. Note that this is very low-level code, and does not always
	 * update QCubed state variables. See the QDateRangePickerBase 
	 * file, which contains code to interface between this generated file and QCubed.
	 *
	 * Because subsequent re-code generations will overwrite any changes to this
	 * file, you should leave this file unaltered to prevent yourself from losing
	 * any information or code changes.  All customizations should be done by
	 * overriding existing or implementing new methods, properties and variables
	 * in the QDateRangePicker class file.
	 *
	 */

	/* Custom event classes for this control */
	
	

	/* Custom "property" event classes for this control */
	/**
	 * 
	 */
	class QDateRangePicker_CloseEvent extends QJqUiPropertyEvent {
		const EventName = 'QDateRangePicker_Close';
		protected $strJqProperty = 'onClose';
	}


	/**
	 * Generated QDateRangePickerGen class.
	 * 
	 * This is the QDateRangePickerGen class which is automatically generated
	 * by scraping the JQuery UI documentation website. As such, it includes all the options
	 * as listed by the JQuery UI website, which may or may not be appropriate for QCubed. See
	 * the QDateRangePickerBase class for any glue code to make this class more
	 * usable in QCubed.
	 * 
	 * @see QDateRangePickerBase
	 * @package Controls\Base
	 * @property array $PresetRanges 
	 * @property array $Presets 
	 * @property string $RangeStartTitle 
	 * @property string $RangeEndTitle 
	 * @property string $DoneButtonText 
	 * @property string $PrevLinkText 
	 * @property string $NextLinkText 
	 * @property QDateTime $EarliestDate 
	 * @property QDateTime $LatestDate 
	 * @property boolean $ConstrainDates 
	 * @property string $RangeSplitter 
	 * @property string $JqDateFormat 
	 * @property boolean $CloseOnSelect 
	 * @property boolean $Arrows 
	 * @property QJsClosure $OnClose 
	 */

	class QDateRangePickerGen extends QPanel	{
		protected $strJavaScripts = __JQUERY_EFFECTS__;
		protected $strStyleSheets = __JQUERY_CSS__;
		/** @var array */
		protected $arrPresetRanges;
		/** @var array */
		protected $arrPresets;
		/** @var string */
		protected $strRangeStartTitle;
		/** @var string */
		protected $strRangeEndTitle;
		/** @var string */
		protected $strDoneButtonText;
		/** @var string */
		protected $strPrevLinkText;
		/** @var string */
		protected $strNextLinkText;
		/** @var QDateTime */
		protected $dttEarliestDate;
		/** @var QDateTime */
		protected $dttLatestDate;
		/** @var boolean */
		protected $blnConstrainDates;
		/** @var string */
		protected $strRangeSplitter;
		/** @var string */
		protected $strJqDateFormat;
		/** @var boolean */
		protected $blnCloseOnSelect = null;
		/** @var boolean */
		protected $blnArrows = null;
		/** @var QJsClosure */
		protected $mixOnClose = null;
		
		protected function makeJsProperty($strProp, $strKey) {
			$objValue = $this->$strProp;
			if (null === $objValue) {
				return '';
			}

			return $strKey . ': ' . JavaScriptHelper::toJsObject($objValue) . ', ';
		}

		protected function makeJqOptions() {
			$strJqOptions = '';
			$strJqOptions .= $this->makeJsProperty('PresetRanges', 'presetRanges');
			$strJqOptions .= $this->makeJsProperty('Presets', 'presets');
			$strJqOptions .= $this->makeJsProperty('RangeStartTitle', 'rangeStartTitle');
			$strJqOptions .= $this->makeJsProperty('RangeEndTitle', 'rangeEndTitle');
			$strJqOptions .= $this->makeJsProperty('DoneButtonText', 'doneButtonText');
			$strJqOptions .= $this->makeJsProperty('PrevLinkText', 'prevLinkText');
			$strJqOptions .= $this->makeJsProperty('NextLinkText', 'nextLinkText');
			$strJqOptions .= $this->makeJsProperty('EarliestDate', 'earliestDate');
			$strJqOptions .= $this->makeJsProperty('LatestDate', 'latestDate');
			$strJqOptions .= $this->makeJsProperty('ConstrainDates', 'constrainDates');
			$strJqOptions .= $this->makeJsProperty('RangeSplitter', 'rangeSplitter');
			$strJqOptions .= $this->makeJsProperty('JqDateFormat', 'dateFormat');
			$strJqOptions .= $this->makeJsProperty('CloseOnSelect', 'closeOnSelect');
			$strJqOptions .= $this->makeJsProperty('Arrows', 'arrows');
			$strJqOptions .= $this->makeJsProperty('OnClose', 'onClose');
			if ($strJqOptions) $strJqOptions = substr($strJqOptions, 0, -2);
			return $strJqOptions;
		}

		public function getJqSetupFunction() {
			return 'daterangepicker';
		}

		public function GetControlJavaScript() {
			return sprintf('jQuery("#%s").%s({%s})', $this->getJqControlId(), $this->getJqSetupFunction(), $this->makeJqOptions());
		}

		public function GetEndScript() {
			$str = '';
			if ($this->getJqControlId() !== $this->ControlId) {
				// #845: if the element receiving the jQuery UI events is different than this control
				// we need to clean-up the previously attached event handlers, so that they are not duplicated 
				// during the next ajax update which replaces this control.
				$str = sprintf('jQuery("#%s").off(); ', $this->getJqControlId());
			}
			$str .= $this->GetControlJavaScript();
			if ($strParentScript = parent::GetEndScript()) {
				$str .= '; ' . $strParentScript;
			}
			return $str;
		}
		
		/**
		 * Call a JQuery UI Method on the object. 
		 * 
		 * A helper function to call a jQuery UI Method. Takes variable number of arguments.
		 *
		 * @param boolean $blnAttribute true if the method is modifying an option, false if executing a command
		 * @param string $strMethodName the method name to call
		 * @internal param $mixed [optional] $mixParam1
		 * @internal param $mixed [optional] $mixParam2
		 */
		protected function CallJqUiMethod($blnAttribute, $strMethodName /*, ... */) {
			$args = func_get_args();
			array_shift ($args);

			$strArgs = JavaScriptHelper::toJsObject($args);
			$strJs = sprintf('jQuery("#%s").%s(%s)',
				$this->getJqControlId(),
				$this->getJqSetupFunction(),
				substr($strArgs, 1, strlen($strArgs)-2));	// params without brackets
			if ($blnAttribute) {
				$this->AddAttributeScript($strJs);
			} else {
				QApplication::ExecuteJavaScript($strJs);
			}
		}




		public function __get($strName) {
			switch ($strName) {
				case 'PresetRanges': return $this->arrPresetRanges;
				case 'Presets': return $this->arrPresets;
				case 'RangeStartTitle': return $this->strRangeStartTitle;
				case 'RangeEndTitle': return $this->strRangeEndTitle;
				case 'DoneButtonText': return $this->strDoneButtonText;
				case 'PrevLinkText': return $this->strPrevLinkText;
				case 'NextLinkText': return $this->strNextLinkText;
				case 'EarliestDate': return $this->dttEarliestDate;
				case 'LatestDate': return $this->dttLatestDate;
				case 'ConstrainDates': return $this->blnConstrainDates;
				case 'RangeSplitter': return $this->strRangeSplitter;
				case 'JqDateFormat': return $this->strJqDateFormat;
				case 'CloseOnSelect': return $this->blnCloseOnSelect;
				case 'Arrows': return $this->blnArrows;
				case 'OnClose': return $this->mixOnClose;
				default: 
					try { 
						return parent::__get($strName); 
					} catch (QCallerException $objExc) { 
						$objExc->IncrementOffset(); 
						throw $objExc; 
					}
			}
		}

		public function __set($strName, $mixValue) {
			switch ($strName) {
				case 'PresetRanges':
					try {
						$this->arrPresetRanges = QType::Cast($mixValue, QType::ArrayType);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'presetRanges', $this->arrPresetRanges);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Presets':
					try {
						$this->arrPresets = QType::Cast($mixValue, QType::ArrayType);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'presets', $this->arrPresets);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'RangeStartTitle':
					try {
						$this->strRangeStartTitle = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'rangeStartTitle', $this->strRangeStartTitle);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'RangeEndTitle':
					try {
						$this->strRangeEndTitle = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'rangeEndTitle', $this->strRangeEndTitle);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'DoneButtonText':
					try {
						$this->strDoneButtonText = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'doneButtonText', $this->strDoneButtonText);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'PrevLinkText':
					try {
						$this->strPrevLinkText = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'prevLinkText', $this->strPrevLinkText);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'NextLinkText':
					try {
						$this->strNextLinkText = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'nextLinkText', $this->strNextLinkText);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'EarliestDate':
					try {
						$this->dttEarliestDate = QType::Cast($mixValue, QType::DateTime);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'earliestDate', $this->dttEarliestDate);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'LatestDate':
					try {
						$this->dttLatestDate = QType::Cast($mixValue, QType::DateTime);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'latestDate', $this->dttLatestDate);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ConstrainDates':
					try {
						$this->blnConstrainDates = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'constrainDates', $this->blnConstrainDates);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'RangeSplitter':
					try {
						$this->strRangeSplitter = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'rangeSplitter', $this->strRangeSplitter);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'JqDateFormat':
					try {
						$this->strJqDateFormat = QType::Cast($mixValue, QType::String);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'dateFormat', $this->strJqDateFormat);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'CloseOnSelect':
					try {
						$this->blnCloseOnSelect = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'closeOnSelect', $this->blnCloseOnSelect);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Arrows':
					try {
						$this->blnArrows = QType::Cast($mixValue, QType::Boolean);
						if ($this->OnPage) {
							$this->CallJqUiMethod(true, 'option', 'arrows', $this->blnArrows);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'OnClose':
					try {
						$this->mixOnClose = new QJsClosure($mixValue, array(""));
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}


				case 'Enabled':
					$this->Disabled = !$mixValue;	// Tie in standard QCubed functionality
					parent::__set($strName, $mixValue);
					break;
					
				default:
					try {
						parent::__set($strName, $mixValue);
						break;
					} catch (QCallerException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}
			}
		}
	}

?>
