Codegen Notes

QCubed is set up to generate a default set of objects and forms to get you started with your application. This is called “codegen”. The notes below will help you understand the process and how to customize it to your needs. Ideally, you should customize the codegen process first before starting to write you application code, but we know that development does not go always as planned, and the whole system is set up so that you can separate out your hand written code from the generated code, and continue to tweak the codegen process at re-generate code at any time.

The codegen process starts at the QCubed start screen by clicking on the codegen link. PHP is executed to generate the files. Therefore, the target directories for codegen will need to be writable by the web server process.

The codegen process works by instantiating a QCodeGen object. This object then looks in the template directories and begins to include the php files there that start with an underscore (_). These templates then include other files, which in turn may include other template files. This combination will eventually generate the forms, model connectors, and data table interface classes that you will base your application on.


Model Connectors
Model Connectors are helper classes that have methods which connect form controls with columns in data tables. Each column in the data table corresponds with a control that is generated in a model connector class. Your form object calls methods in the model connector to get the copies of the controls and then to place them in the form.

To customize the generated controls, you have the following choices:
- Create your own code generating templates and place them in your project/includes/codegen/templates directory. Its best to do this by copying the corresponding file in the qcubed/framework/includes/codegen/templates directory and then editing the file and placing it in the corresponding location in the above project directory. The project directory files will override the files in the vendor directory.
- Override the generated code by editing the model connectors in your project/includes/connector directory.


Version 3 
QCubed Version 3 introduces the concept of having the controls themselves create the code to interact with the database for the ModelConnector, rather than the templates. Coupled with this is the ModelConnectorEditDlg dialog, which lets you right click on a control and edit many of the controls options. These changes get embedded into the generated ModelConnector. You can see a description of each option by hovering over the item in the dialog.

These new features give the developer the ability to do the following:
- Override the default control type to specify a particular control type in the comment field of a table column
- Allow custom controls and plugins to generate their own model connector code and have that code automatically be used instead of the default code just by specifying that control in the comments of a column.
- Allow subclasses of standard controls to override the code generation methods to generate different code.
- Specify additional overrides to control many aspects of control creation in the generated model connector.

Notes for Upgrading from version 2
Many of the problems that caused programmers to create their own templates are now solvable through the new Options feature available through Comments. However, you are still free to override the templates as needed. In fact, this new feature is implemented entirely through the templates, so if you want to keep your old templates, simply replace the new templates with the old ones from version 2.

QLabel no longer accepts a strFormat parameter at create time. You can always set it using the ->Format parameter after creating the control, or specify this in an override in a Comment option.


